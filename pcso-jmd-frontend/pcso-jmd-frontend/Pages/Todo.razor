@page "/todo"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using System.Text.Json.Serialization

<h1>Welcome ToDo Page - here will will consume the new API</h1>


@if (todoList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Message</th>
                <th>Created</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var todo in todoList)
            {
                <tr>
                    <td>@todo.name</td>
                    <td>@todo.message</td>
                    <td>@todo.created</td>
                </tr>
            }
        </tbody>
    </table>
}

<div>
    <input @bind = "name" placeholder="Type Name" />
    <input @bind = "message" placeholder="Type Message" />
</div>
<br />
<br />


<button class="btn btn-primary" @onclick="AddTodo">Add To Do</button>

<button class="btn btn-primary" @onclick="InvokeJavaScript">Invoke JS</button>

<button class="btn btn-primary" @onclick="DeleteAll">Delete All</button>

@code {

    private int currentCount = 0;
    private string jsonData;
    private List<ToDoItem> todoList;
    private string name;
    private string message;

    private async void DeleteAll()
    {
        HttpClient httpClient = new HttpClient();
        await httpClient.DeleteAsync("https://pcso-jmd-backend.azurewebsites.net/todoitems");
        await GetListAsync();
        StateHasChanged();
    }

    private async void AddTodo()
    {
        currentCount++;
        HttpClient httpClient = new HttpClient();

        ToDoItem todoItemPost = new ToDoItem
            {
                name = name,
                message = message
            };
        string myContent = JsonSerializer.Serialize(todoItemPost);
        byte[] buffer = System.Text.Encoding.UTF8.GetBytes(myContent);
        ByteArrayContent byteContent = new ByteArrayContent(buffer);
        byteContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

        await httpClient.PostAsync("https://pcso-jmd-backend.azurewebsites.net/todoitems", byteContent);

        await GetListAsync();

        StateHasChanged();

    }
    private async Task GetListAsync()
    {
        HttpClient httpClient = new HttpClient();
        jsonData = await httpClient.GetStringAsync("https://pcso-jmd-backend.azurewebsites.net/todoitems");

        todoList = JsonSerializer.Deserialize<List<ToDoItem>>(jsonData);

        name = null;
        message = null;
    }

    private async Task InvokeJavaScript()
    {
        //await JSRuntime.InvokeVoidAsync("DeleteCache");
        await JSRuntime.InvokeVoidAsync("alert","Hello Im an alert box too!");
    }

    // Root myDeserializedClass = JsonConvert.DeserializeObject<List<Root>>(myJsonResponse);
    public class ToDoItem
    {
        public int id { get; set; }
        public string name { get; set; }
        public bool isComplete { get; set; }
        public string message { get; set; }
        public DateTime created { get; set; }
    }


}
